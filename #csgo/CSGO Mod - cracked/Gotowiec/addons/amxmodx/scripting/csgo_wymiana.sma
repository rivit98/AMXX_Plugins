/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <csgo>
#include <colorchat>

native is_user_logged(id);

new g_iWymieniajacyGracza[33];
new g_iOstatniOferujacyGracza[33];

new g_iIndexOstatniejOferty[33];
new g_iRodzajOfertyGracza[33][2];
new g_iOfertaGracza[33][2][3];
new bool:g_bBlokadaWymianyGracza[33];

public plugin_init() {
	register_plugin("CSGO Mod: Wymiana", "1.0", "d0naciak.pl");
	
	register_clcmd("say /handel", "cmd_Wymiana");
	register_clcmd("say /wymien", "cmd_Wymiana");
	register_clcmd("say /wymiana", "cmd_Wymiana");
	
	register_clcmd("csgow_WpiszOferteEuro", "cmd_WpisalOferteEuro");
	
	register_menu("PotwierdzOferteWymiany", MENU_KEY_7|MENU_KEY_8, "PotwierdzOferteWymiany_Handler");
}

public plugin_natives() {
	register_native("csgo_open_trade", "cmd_Wymiana", 1);
}

public client_authorized(id) {
	new szInfo[4];
	get_user_info(id, "_csgodw", szInfo, 3);
	
	if(szInfo[0] == '1') {
		g_bBlokadaWymianyGracza[id] = true;
	}
	else {
		g_bBlokadaWymianyGracza[id] = false;
	}
}

public client_disconnect(id) {
	g_iWymieniajacyGracza[id] = 0;
}

public cmd_Wymiana(id) {
	if(!is_user_logged(id)) {
		return PLUGIN_HANDLED;
	}
	
	if(g_iWymieniajacyGracza[id]) {
		OfertaWymiany(id);
		return PLUGIN_HANDLED;
	}
	
	new szItem[128], iMenu = menu_create("Handel", "Wymiana_Handler");
	
	menu_additem(iMenu, "Stworz oferte wymiany");
	formatex(szItem, 127, "Blokada wymiany: %s", g_bBlokadaWymianyGracza[id] ? "\rwlaczona" : "\ywylaczona");
	menu_additem(iMenu, szItem);
	menu_display(id, iMenu);
	return PLUGIN_HANDLED;
}

public Wymiana_Handler(id, iMenu, iItem) {
	switch(iItem) {
		case 0: OfertaWymiany(id);
		case 1: {
			g_bBlokadaWymianyGracza[id] = !g_bBlokadaWymianyGracza[id];
			client_cmd(id, "setinfo _csgodw %d", _:g_bBlokadaWymianyGracza[id]);
			set_user_info(id, "_csgodw", g_bBlokadaWymianyGracza[id] ? "1" : "0");
			cmd_Wymiana(id);
		}
	}
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public OfertaWymiany(id) {
	new iTarget = g_iWymieniajacyGracza[id],
	szItem[256], szNick[32], szOferta[64],
	iMenu = menu_create("Oferta wymiany", "OfertaWymiany_Handler");
	
	
	if(!iTarget) {
		formatex(szItem, 255, "Oferta wymiany dla \yBrak \d(kliknij, aby ustawic)");
		menu_additem(iMenu, szItem);
	}
	else {
		if(!is_user_connected(iTarget)) {
			g_iWymieniajacyGracza[id] = 0;
			csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
			menu_destroy(iMenu);
			return;
		}
			
		get_user_name(iTarget, szNick, 31);
		formatex(szItem, 255, "Oferta wymiany dla \y%s", szNick);
		menu_additem(iMenu, szItem);
		
		PobierzOferteGracza(id, 0, szOferta, 63); //pamietaj, ze tylko dla id maja byc zapisane dane!
		formatex(szItem, 255, "Twoja oferta: \r%s \d(kliknij, aby zmienic)", szOferta);
		menu_additem(iMenu, szItem);
		
		PobierzOferteGracza(id, 1, szOferta, 63); //pamietaj, ze tylko dla id maja byc zapisane dane!
		formatex(szItem, 255, "Oferta \y%s: \r%s \d(kliknij, aby zmienic)", szNick, szOferta);
		menu_additem(iMenu, szItem);
		
		menu_additem(iMenu, "Wyslij oferte wymiany");
		menu_additem(iMenu, "\rUsun oferte wymiany");
		
		menu_setprop(iMenu, MPROP_EXIT, MEXIT_NEVER);
	}
	
	menu_display(id, iMenu)
}


public OfertaWymiany_Handler(id, iMenu, iItem) {
	switch(iItem) {
		case 0: {
			if(g_iWymieniajacyGracza[id]) {
				OfertaWymiany(id);
				csgo_print_message(id, "Nie mozesz zmieniac juz wymieniajacego/ej! Aby to zrobic, stworz nowa oferte wymiany.");
			}
			else {
				WybierzWymieniajacego(id);
			}
		}
		
		case 1: {
			g_iIndexOstatniejOferty[id] = 0;
			ZmienOferte(id);
		}
		
		case 2: {
			g_iIndexOstatniejOferty[id] = 1;
			ZmienOferte(id);
		}
		
		case 3: {
			WyslijOferteWymiany(id);
		}
		
		case 4: {
			g_iWymieniajacyGracza[id] = 0;
			csgo_print_message(id, "Oferta wymiany zostala anulowana.");
		}
	}
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public ZmienOferte(id) {
	new iMenu = menu_create("Co chcesz zmienic w ofercie?", "ZmienOferte_Handler");
	
	menu_additem(iMenu, "Zmien wartosc \rSkrzynki/Skiny/Klucze");
	menu_additem(iMenu, "Zmien wartosc \rEuro");
	
	menu_setprop(iMenu, MPROP_EXITNAME, "Cofnij");
	menu_display(id, iMenu);
}

public ZmienOferte_Handler(id, iMenu, iItem) {
	switch(iItem) {
		case MENU_EXIT: {
			OfertaWymiany(id);
		}
		case 0: {
			new iIdOferty = g_iIndexOstatniejOferty[id];
			
			g_iOfertaGracza[id][iIdOferty][0] = 0;
			g_iOfertaGracza[id][iIdOferty][1] = 0;
			
			new iMenu2 = menu_create("Wybierz oferte rzeczowa:", "UstawOferteRzeczowa_Handler");
			
			menu_additem(iMenu2, "Skin");
			menu_additem(iMenu2, "Skrzynka");
			menu_additem(iMenu2, "Klucz do skrzynki");
			
			menu_setprop(iMenu2, MPROP_EXIT, MEXIT_NEVER);
			menu_display(id, iMenu2);
		}
		
		case 1: {
			client_cmd(id, "messagemode csgow_WpiszOferteEuro");
			csgo_print_message(id, "Wpisz ile^x03 Euro^x01 zamierzasz wplacic do oferty.");
		}
	}
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public UstawOferteRzeczowa_Handler(id, iMenu, iItem) {
	menu_destroy(iMenu);
	
	new iIdOferty = g_iIndexOstatniejOferty[id];
	
	switch(iItem) {
		case 0: {
			g_iRodzajOfertyGracza[id][iIdOferty] = 1;
			WybierzBron(id);
		}
		
		case 1: {
			g_iRodzajOfertyGracza[id][iIdOferty] = 2;
			WybierzSkrzynke(id);
		}
		
		case 2: {
			new iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
			
			if(!is_user_connected(iTarget)) {
				g_iWymieniajacyGracza[id] = 0;
				csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
				return PLUGIN_CONTINUE;
			}
			
			if(!csgo_get_user_keys(iTarget)) {
				csgo_print_message(id, "Brak kluczy do zaoferowania!");
				g_iRodzajOfertyGracza[id][iIdOferty] = 0;
				OfertaWymiany(id);
			}
			else {
				g_iRodzajOfertyGracza[id][iIdOferty] = 3;
				OfertaWymiany(id);
			}
		}
	}
	
	return PLUGIN_CONTINUE;
}

public WybierzBron(id) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return;
	}
	
	new iMenu = menu_create("Wybierz bron:", "WybierzBron_Handler"),
	szNazwaBroni[16], szCswId[4], bool:bMaSkiny, iIloscSkinow;
	
	for(new i = 1; i < 31; i++)
	{
		iIloscSkinow = csgo_get_skinsnum(i);
		
		if(CSGO_BLOCKWPNSKINS & (1<<i) || !iIloscSkinow)
			continue;
		
		bMaSkiny = false;
		for(new j = 1; j <= iIloscSkinow; j++) {
			if(csgo_get_user_skins(iTarget, i, j)) {
				bMaSkiny = true;
				break;
			}
		}
		
		if(!bMaSkiny) {
			continue;
		}
		
		
		csgo_get_short_weaponname(i, szNazwaBroni, 15);
		num_to_str(i, szCswId, 3);
		
		menu_additem(iMenu, szNazwaBroni, szCswId);
	}
	
	if(!szCswId[0]) {
		csgo_print_message(id, "Brak skinow do zaoferowania!");
		g_iRodzajOfertyGracza[id][iIdOferty] = 0;
		OfertaWymiany(id);
		menu_destroy(iMenu);
	}
	else {
		menu_setprop(iMenu, MPROP_EXITNAME, "\rUsun oferte skina");
		menu_display(id, iMenu);
	}
}

public WybierzBron_Handler(id, iMenu, iItem) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		menu_destroy(iMenu);
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return PLUGIN_CONTINUE;
	}
	
	if(iItem < 0) {
		if(iItem == MENU_EXIT) {
			menu_destroy(iMenu);
			g_iRodzajOfertyGracza[id][iIdOferty] = 0;
			
			OfertaWymiany(id);
		}
		
		return PLUGIN_CONTINUE;
	}
	
	new iAccess, iCb, szCswId[4];
	menu_item_getinfo(iMenu, iItem, iAccess, szCswId, 3, _, _, iCb);
	
	new iNoweMenu = menu_create("Wybierz skina, ktorego chcesz dodac do oferty:", "WybierzSkina_Handler"),
	iCswId = g_iOfertaGracza[id][iIdOferty][0] = str_to_num(szCswId),
	szSkin[32], szSkinId[4];
	
	for(new i = 1; i <= csgo_get_skinsnum(iCswId); i++) {
		if(csgo_get_user_skins(iTarget, iCswId, i)) {
			num_to_str(i, szSkinId, 3);
			csgo_get_skin_name(iCswId, i, szSkin, 31);
			
			menu_additem(iNoweMenu, szSkin, szSkinId);
		}
	}
	
	if(!szSkinId[0]) {
		csgo_print_message(id, "Brak skinow do zaoferowania!");
		g_iRodzajOfertyGracza[id][iIdOferty] = 0;
		OfertaWymiany(id);
	}
	else {
		menu_setprop(iNoweMenu, MPROP_EXIT, MEXIT_NEVER);
		menu_display(id, iNoweMenu);
	}
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public WybierzSkina_Handler(id, iMenu, iItem) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		menu_destroy(iMenu);
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return PLUGIN_CONTINUE;
	}
	
	if(iItem < 0) {
		if(iItem == MENU_EXIT) {
			menu_destroy(iMenu);
			g_iRodzajOfertyGracza[id][iIdOferty] = 0;
		}
		
		return PLUGIN_CONTINUE;
	}
	
	new iAccess, iCb, szSkinId[4];
	menu_item_getinfo(iMenu, iItem, iAccess, szSkinId, 3, _, _, iCb);
	
	g_iOfertaGracza[id][iIdOferty][1] = str_to_num(szSkinId);
	OfertaWymiany(id);
		
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public WybierzSkrzynke(id) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
		
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return;
	}
	
	new iMenu = menu_create("Wybierz skrzynke:", "WybierzSkrzynke_Handler"),
	szNazwa[32], szSkrzynkaId[4];
	
	for(new i = 1; i <= csgo_get_cratesnum(); i++)
	{
		if(!csgo_get_user_crates(iTarget, i))
			continue;
		
		csgo_get_crate_name(i, szNazwa, 31);
		num_to_str(i, szSkrzynkaId, 3);
		
		menu_additem(iMenu, szNazwa, szSkrzynkaId);
	}
	
	if(!szSkrzynkaId[0]) {
		csgo_print_message(id, "Brak skrzynek do zaoferowania!");
		g_iRodzajOfertyGracza[id][iIdOferty] = 0;
		OfertaWymiany(id);
		menu_destroy(iMenu);
	}
	else {
		menu_display(id, iMenu);
	}
}

public WybierzSkrzynke_Handler(id, iMenu, iItem) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		menu_destroy(iMenu);
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return PLUGIN_CONTINUE;
	}
	
	if(iItem < 0) {
		if(iItem == MENU_EXIT) {
			menu_destroy(iMenu);
			g_iRodzajOfertyGracza[id][iIdOferty] = 0;
		}
		
		return PLUGIN_CONTINUE;
	}
	
	new iAccess, iCb, szSkrzynkaId[4];
	menu_item_getinfo(iMenu, iItem, iAccess, szSkrzynkaId, 3, _, _, iCb);
	new iSkrzynka = str_to_num(szSkrzynkaId);
	
	g_iOfertaGracza[id][iIdOferty][0] = iSkrzynka;
	OfertaWymiany(id);
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public cmd_WpisalOferteEuro(id) {
	if(!g_iWymieniajacyGracza[id]) {
		return PLUGIN_CONTINUE;
	}
	
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id,
	szEuro[16]; 
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return PLUGIN_HANDLED;
	}
	
	read_argv(1, szEuro, 15);
	replace(szEuro, 15, ".", "");
	
	g_iOfertaGracza[id][iIdOferty][2] = str_to_num(szEuro);
	
	if(g_iOfertaGracza[id][iIdOferty][2] <= 0) {
		g_iOfertaGracza[id][iIdOferty][2] = 0;
		csgo_print_message(id, "Nie wolno Ci wpisywac wartosci ujemnych!");
	}
	if(g_iOfertaGracza[id][iIdOferty][2] > csgo_get_user_euro(iTarget)) {
		g_iOfertaGracza[id][iIdOferty][2] = csgo_get_user_euro(iTarget);
	}
	
	OfertaWymiany(id);
	
	return PLUGIN_HANDLED;
}
	
WybierzWymieniajacego(id) {
	new iMenu = menu_create("Wybierz gracza, z ktorym chcesz handlowac", "WybierzWymieniajacego_Handler");
	new szId[4], szNick[32];
	static iIloscSlotow;
	if(!iIloscSlotow) {
		iIloscSlotow = get_maxplayers();
	}
	
	for(new i = 1; i <= iIloscSlotow; i++) {
		if(!is_user_connected(i) || is_user_hltv(i) || g_bBlokadaWymianyGracza[i] || i == id || !is_user_logged(i)) {
			continue;
		}
		
		get_user_name(i, szNick, 31);
		num_to_str(i, szId, 3);
		menu_additem(iMenu, szNick, szId);
	}
	
	if(szId[0]) {
		menu_display(id, iMenu);
	}
	else {
		csgo_print_message(id, "Nie znaleziono zadnego gracza.");
	}
}

public WybierzWymieniajacego_Handler(id, iMenu, iItem) {
	if(iItem < 0) {
		if(iItem == MENU_EXIT) {
			menu_destroy(iMenu);
		}
		
		return PLUGIN_CONTINUE;
	}
	
	new szId[4], iAccess, iCb, iTarget;
	
	menu_item_getinfo(iMenu, iItem, iAccess, szId, 3, _, _, iCb);
	iTarget = str_to_num(szId);
	
	if(!is_user_connected(iTarget)) {
		csgo_print_message(id, "Nie znaleziono gracza.");
		return PLUGIN_CONTINUE;
	}
	
	g_iWymieniajacyGracza[id] = iTarget;
	
	for(new i = 0; i < 2; i++) {
		for(new j = 0; j < 3; j++) {
			g_iOfertaGracza[id][i][j] = 0;
		}
		
		g_iRodzajOfertyGracza[id][i] = 0;
	}
	
	OfertaWymiany(id);
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public WyslijOferteWymiany(id) {
	new iTarget = g_iWymieniajacyGracza[id];
	
	if(!is_user_logged(iTarget)) {
		csgo_print_message(id, "Wymieniajacy/a nie jest zalogowany/a.");
		return;
	}
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return;
	}
	
	new szMenu[512], szNick[32], szOferta[2][64];
	
	g_iOstatniOferujacyGracza[iTarget] = id;
	
	get_user_name(id, szNick, 31);
	PobierzOferteGracza(id, 0, szOferta[0], 63);
	PobierzOferteGracza(id, 1, szOferta[1], 63);
	formatex(szMenu, 511, "\wOferta wymiany od \y%s: \r%s^n\wOczekuje od Ciebie: \r%s^n^n\r7. \wZgadzam sie na wymiane^n\r8. Odrzuc oferte wymiany", szNick, szOferta[0], szOferta[1]);
	
	show_menu(iTarget, MENU_KEY_7|MENU_KEY_8, szMenu, -1, "PotwierdzOferteWymiany");
}

public PotwierdzOferteWymiany_Handler(id, iItem) {
	new iTarget = g_iOstatniOferujacyGracza[id];
	
	switch(iItem) {
		case 6: {
			if(!is_user_connected(iTarget)) {
				csgo_print_message(id, "Oferujacy/a wymiane rozlaczyl(a) sie z serwerem.");
			}
			else {
				if(!SprawdzOferte(iTarget, 0) || !SprawdzOferte(iTarget, 1)) {
					ZakonczOferteWymiany(iTarget, id, "Oferta wymiany anulowana - jeden z graczy nie posiadal oferowanych przedmiotow.");
				}
				else {
					PrzydzielOferty(iTarget, id);
					
					ZakonczOferteWymiany(iTarget, id, "Wymiana przebiegla pomyslnie!");
				}
			}
		}

		case 7: {
			ZakonczOferteWymiany(iTarget, id, "Oferta wymiany zostala odrzucona.");
		}
	}
}

ZakonczOferteWymiany(id, iTarget, const szPowod[]) {
	g_iWymieniajacyGracza[id] = 0;
	
	csgo_print_message(id, szPowod);
	csgo_print_message(iTarget, szPowod);
}

PobierzOferteGracza(id, iIdOferty, szOferta[], iLen) {
	switch(g_iRodzajOfertyGracza[id][iIdOferty]) {
		case 1: {
			if(!g_iOfertaGracza[id][iIdOferty][0] || !g_iOfertaGracza[id][iIdOferty][1]) {
				g_iRodzajOfertyGracza[id][iIdOferty] = 0;
				
				new szOferta2[256];
				PobierzOferteGracza(id, iIdOferty, szOferta2, 255);
				copy(szOferta, iLen, szOferta2);
				return;
			}
			
			new szBron[16]; csgo_get_short_weaponname(g_iOfertaGracza[id][iIdOferty][0], szBron, 15);
			new szSkin[32]; csgo_get_skin_name(g_iOfertaGracza[id][iIdOferty][0], g_iOfertaGracza[id][iIdOferty][1], szSkin, 31);
			if(g_iOfertaGracza[id][iIdOferty][2]) {
				new szEuro[16]; csgo_format_euro(g_iOfertaGracza[id][iIdOferty][2], szEuro, 15);
				formatex(szOferta, iLen, "Skin %s do %s, %s Euro", szSkin, szBron, szEuro);
			}
			else {
				formatex(szOferta, iLen, "Skin %s do %s", szSkin, szBron);
			}
		}
		case 2: {
			if(!g_iOfertaGracza[id][iIdOferty][0]) {
				g_iRodzajOfertyGracza[id][iIdOferty] = 0;
				
				new szOferta2[256]
				PobierzOferteGracza(id, iIdOferty, szOferta2, 255);
				copy(szOferta, iLen, szOferta2);
				return;
			}
			
			new szSkrzynka[32]; csgo_get_crate_name(g_iOfertaGracza[id][iIdOferty][0], szSkrzynka, 31);
			if(g_iOfertaGracza[id][iIdOferty][2]) {
				new szEuro[16]; csgo_format_euro(g_iOfertaGracza[id][iIdOferty][2], szEuro, 15);
				formatex(szOferta, iLen, "%s, %s Euro", szSkrzynka, szEuro);
			}
			else {
				copy(szOferta, iLen, szSkrzynka);
			}
		}
		case 3: {
			if(g_iOfertaGracza[id][iIdOferty][2]) {
				new szEuro[16]; csgo_format_euro(g_iOfertaGracza[id][iIdOferty][2], szEuro, 15);
				formatex(szOferta, iLen, "Klucz do skrzynki, %s Euro", szEuro);
			}
			else {
				copy(szOferta, iLen, "Klucz do skrzynki");
			}
		}
		default: {
			if(g_iOfertaGracza[id][iIdOferty][2]) {
				new szEuro[16]; csgo_format_euro(g_iOfertaGracza[id][iIdOferty][2], szEuro, 15);
				formatex(szOferta, iLen, "%s Euro", szEuro);
			}
			else {
				copy(szOferta, iLen, "brak");
			}
		}
	}
}


SprawdzOferte(id, iIdOferty) {
	new iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	switch(g_iRodzajOfertyGracza[id][iIdOferty]) {
		case 1: {
			if(!g_iOfertaGracza[id][iIdOferty][0] || !g_iOfertaGracza[id][iIdOferty][1] || !csgo_get_user_skins(iTarget, g_iOfertaGracza[id][iIdOferty][0], g_iOfertaGracza[id][iIdOferty][1])) {
				return 0;
			}
		}
		
		case 2: {
			if(!g_iOfertaGracza[id][iIdOferty][0] || !csgo_get_user_crates(iTarget, g_iOfertaGracza[id][iIdOferty][0])) {
				return 0;
			}
		}
		
		case 3: {
			if(!csgo_get_user_keys(iTarget)) {
				return 0;
			}
		}
	}
	
	if(csgo_get_user_euro(iTarget) < g_iOfertaGracza[id][iIdOferty][2])
		return 0;
	
	return 1;
}

PrzydzielOferty(id, iTarget) {
	switch(g_iRodzajOfertyGracza[id][0]) {
		case 1: {
			csgo_set_user_skins(id, g_iOfertaGracza[id][0][0], g_iOfertaGracza[id][0][1], csgo_get_user_skins(id, g_iOfertaGracza[id][0][0], g_iOfertaGracza[id][0][1]) - 1);
			csgo_set_user_skins(iTarget, g_iOfertaGracza[id][0][0], g_iOfertaGracza[id][0][1], csgo_get_user_skins(iTarget, g_iOfertaGracza[id][0][0], g_iOfertaGracza[id][0][1]) + 1);
		}
		
		case 2: {
			csgo_set_user_crates(id, g_iOfertaGracza[id][0][0], csgo_get_user_crates(id, g_iOfertaGracza[id][0][0]) - 1);
			csgo_set_user_crates(iTarget, g_iOfertaGracza[id][0][0], csgo_get_user_crates(iTarget, g_iOfertaGracza[id][0][0]) + 1);
		}
		
		case 3: {
			csgo_set_user_keys(id, csgo_get_user_keys(id) - 1);
			csgo_set_user_keys(iTarget, csgo_get_user_keys(iTarget) + 1);
		}
	}
	
	csgo_set_user_euro(id, csgo_get_user_euro(id) - g_iOfertaGracza[id][0][2]);
	csgo_set_user_euro(iTarget, csgo_get_user_euro(iTarget) + g_iOfertaGracza[id][0][2]);
	
	
	
	switch(g_iRodzajOfertyGracza[id][1]) {
		case 1: {
			csgo_set_user_skins(id, g_iOfertaGracza[id][1][0], g_iOfertaGracza[id][1][1], csgo_get_user_skins(id, g_iOfertaGracza[id][1][0], g_iOfertaGracza[id][1][1]) + 1);
			csgo_set_user_skins(iTarget, g_iOfertaGracza[id][1][0], g_iOfertaGracza[id][1][1], csgo_get_user_skins(iTarget, g_iOfertaGracza[id][1][0], g_iOfertaGracza[id][1][1]) - 1);
		}
		
		case 2: {
			csgo_set_user_crates(id, g_iOfertaGracza[id][1][0], csgo_get_user_crates(id, g_iOfertaGracza[id][1][0]) + 1);
			csgo_set_user_crates(iTarget, g_iOfertaGracza[id][1][0], csgo_get_user_crates(iTarget, g_iOfertaGracza[id][1][0]) - 1);
		}
		
		case 3: {
			csgo_set_user_keys(id, csgo_get_user_keys(id) + 1);
			csgo_set_user_keys(iTarget, csgo_get_user_keys(iTarget) - 1);
		}
	}
	
	csgo_set_user_euro(id, csgo_get_user_euro(id) + g_iOfertaGracza[id][1][2]);
	csgo_set_user_euro(iTarget, csgo_get_user_euro(iTarget) - g_iOfertaGracza[id][1][2]);
}
